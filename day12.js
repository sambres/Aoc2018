const fs = require('fs');
const fn = require('./common/functional');
const runner = require('./common/runner');

const format = input =>
  input
    .split('\n')
    .filter(c => c.match(/[.#]{5} => [.#]/))
    .map(l => {
      const match = l.match(/([.#]{2})([.#]{1})([.#]{2}) => ([.#])/);

      return {
        // hasPlant: match[2],
        // leftPotsB: match[1].split('').map(c => c === '#'),
        // leftPots: match[1],
        // rightPotsB: match[3].split('').map(c => c === '#'),
        // rightPots: match[3],
        line: match[1] + match[2] + match[3],
        becomesPlant: match[4]
      };
    });

const onlyPositive = n => (n < 0 ? 0 : n);

const getNewState = (pots, rules) => {
  let newState = [];
  let extendedPots = ['.', '.', '.', ...pots, '.', '.', '.'];

  for (let i = 0; i < extendedPots.length; i++) {
    const pot = extendedPots[i];

    let leftPots = extendedPots[i - 2] + extendedPots[i - 1];
    let rightPots = extendedPots[i + 1] + extendedPots[i + 2];

    const match = rules.find(({ line }) => line === leftPots + pot + rightPots);
    if (match) {
      newState.push(match.becomesPlant);
      // console.log(i - 2, 'line :', match.line, leftPots + pot + rightPots);
      // console.log('newState :', newState.join(''));
    } else {
      newState.push('.');
    }
  }
  // console.log('newState :', newState);
  const firstPlant = newState.findIndex(c => c === '#');
  // console.log('newState.length :', newState.length);
  console.log('firstPlant :', firstPlant);
  const addedToLeft = 4 - firstPlant;
  // return newState;
  return {
    addedToLeft,
    newState: newState.slice(onlyPositive(firstPlant - 3), newState.length)
  };
};

const compute = input => {
  // let state = '#...#..###.#.###.####.####.#..#.##..#..##..#.....#.#.#.##.#...###.#..##..#.##..###..#..##.#..##...'.split(
  //   ''
  // );
  let state = '#..#.#..##......###...###'.split('');
  let addedToLeft = 0;
  for (let i = 0; i < 5; i++) {
    // console.log('state :', i);
    console.log(state.join(''));

    const res = getNewState(state, input);
    state = res.newState;
    addedToLeft += res.addedToLeft;
  }
  console.log('addedToLeft :', addedToLeft);
  return state.join('');
};

runner.run('12test', format, compute);

/*
...#...#....#.....#..#..#..#
...#...#....#.....#..#..#..#...........
...##..##...##....#..#..#..##.
...##..##...##....#..#..#..##..........

.#....#.#..#.#..#.#....##...##..##.........
.#....##....#####...#######....#.#..##.   expected
.##....#....#....#.#..#.#..#.#...#..........



0  ...#..#.#..##......###...###
1  ...#...#....#.....#..#..#..#.
2  ...##..##...##....#..#..#..##.
3  ..#...#..#.#....#..#..#...#..
4  ...##..#...#.#...#..#..##..##..
5  ....#.#..##...#.#..#..#...#...#...
6  ....#....#....#...#..##..##..##...
7  ...##...##...##..#...#...#...#....
8  ...#.#..#.#..#.#..##..##..##..##....
9  ...#....#....#....#...#...#...#.....
10 ..##...##...##...##..##..##..##.....
11 ...#.#..#.#..#.#..#.#...#...#...#......
12 ...#....#....#....#.#..##..##..##......
13 ..##...##...##....#....#...#...#.......
14 ..#.#..#.#..#.#....##...##..##..##.......
15 ..#....#....#.#..#.#..#.#...#...#........
16 .##...##....#....#....#.#..##..##........
17 ..#.#..#.#....##...##....#....#...#.........
18 ..#....#.#..#.#..#.#....##...##..##.........
19 .##....#....#....#.#..#.#..#.#...#..........
20 .#.#....##...##....#....#....#.#..##..........


#..#.#..##......###...###
..#...#....#.....#..#..#..#.
....##..##...##....#..#..#..##.
.....#.#...#..#.#....#..#..#...#..
........#.#..#...#.#...#..#..##..##..
...........#...##...#.#..#..#...#...#...
.............##.#.#....#...#..##..##..##...
..#..###.#...##..#...#...#...#....
....#....##.#.#.#..##..##..##..##....
......##..#..#####....#...#...#...#.....
.......#.#..#...#.##....##..##..##..##.....
..........#...##...#.#...#.#...#...#...#......
............##.#.#....#.#...#.#..##..##..##......
.............#..###.#....#.#...#....#...#...#.......
...............#....##.#....#.#..##...##..##..##.......
.................##..#..#.#....#....#..#.#...#...#........
..................#.#..#...#.#...##...#...#.#..##..##........
.....................#...##...#.#.#.#...##...#....#...#.........
.....##.#.#....#####.#.#.#...##...##..##.........
....#..###.#..#.#.#######.#.#.#..#.#...#..........
.....#....##....#####...#######....#.#..##..........

0  ...#..#.#..##......###...###...........
1  ...#...#....#.....#..#..#..#...........
2  ...##..##...##....#..#..#..##..........
3  ..#.#...#..#.#....#..#..#...#..........
4  ...#.#..#...#.#...#..#..##..##.........
5  ....#...##...#.#..#..#...#...#.........
6  ....##.#.#....#...#..##..##..##........
7  ...#..###.#...##..#...#...#...#........
8  ...#....##.#.#.#..##..##..##..##.......
9  ...##..#..#####....#...#...#...#.......
10 ..#.#..#...#.##....##..##..##..##......
11 ...#...##...#.#...#.#...#...#...#......
12 ...##.#.#....#.#...#.#..##..##..##.....
13 ..#..###.#....#.#...#....#...#...#.....
14 ..#....##.#....#.#..##...##..##..##....
15 ..##..#..#.#....#....#..#.#...#...#....
16 .#.#..#...#.#...##...#...#.#..##..##...
17 ..#...##...#.#.#.#...##...#....#...#...
18 ..##.#.#....#####.#.#.#...##...##..##..
19 .#..###.#..#.#.#######.#.#.#..#.#...#..
20 .#....##....#####...#######....#.#..##.







*/
